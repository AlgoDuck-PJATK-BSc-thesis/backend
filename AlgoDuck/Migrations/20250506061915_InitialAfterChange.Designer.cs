// <auto-generated />
using System;
using AlgoDuck.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AlgoDuck.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506061915_InitialAfterChange")]
    partial class InitialAfterChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AlgoDuck.Modules.AuthModule.Models.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expires_at");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("session", (string)null);
                });

            modelBuilder.Entity("AlgoDuck.Modules.CohortModule.Models.Cohort", b =>
                {
                    b.Property<Guid>("CohortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("CohortId");

                    b.ToTable("Cohorts");
                });

            modelBuilder.Entity("AlgoDuck.Modules.CohortModule.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CohortId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("MessageId");

                    b.HasIndex("CohortId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("AlgoDuck.Modules.CohortModule.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CohortId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("CohortId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ContestModule.Models.Contest", b =>
                {
                    b.Property<Guid>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContestDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ContestEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContestName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("ContestStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.HasKey("ContestId");

                    b.HasIndex("ItemId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ContestModule.Models.ContestProblem", b =>
                {
                    b.Property<Guid>("ContestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid");

                    b.HasKey("ContestId", "ProblemId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ContestProblems");
                });

            modelBuilder.Entity("AlgoDuck.Modules.DuelModule.Models.Duel", b =>
                {
                    b.Property<Guid>("DuelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Cohort1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Cohort2Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("DuelId");

                    b.HasIndex("Cohort1Id");

                    b.HasIndex("Cohort2Id");

                    b.ToTable("Duels");
                });

            modelBuilder.Entity("AlgoDuck.Modules.DuelModule.Models.DuelParticipant", b =>
                {
                    b.Property<Guid>("DuelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("DuelId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DuelParticipants");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ItemModule.Models.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<bool>("Purchasable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.HasKey("ItemId");

                    b.HasIndex("RarityId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ItemModule.Models.Purchase", b =>
                {
                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.HasKey("ItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ItemModule.Models.Rarity", b =>
                {
                    b.Property<Guid>("RarityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("RarityName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("RarityId");

                    b.ToTable("Rarities");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Difficulty", b =>
                {
                    b.Property<Guid>("DifficultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DifficultyName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("DifficultyId");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.HasTag", b =>
                {
                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("ProblemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("HasTags");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.PersonalizedProblem", b =>
                {
                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProblemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonalizedProblems");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Problem", b =>
                {
                    b.Property<Guid>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DuelId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProblemTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("ProblemTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("ProblemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("DuelId");

                    b.HasIndex("ProblemTypeId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.ProblemTemplate", b =>
                {
                    b.Property<Guid>("ProblemTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid");

                    b.Property<string>("TemplateUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestCasesUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProblemTemplateId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemTemplates");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.ProblemType", b =>
                {
                    b.Property<Guid>("ProblemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("ProblemTypeId");

                    b.ToTable("ProblemTypes");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Status", b =>
                {
                    b.Property<Guid>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.UserSolution", b =>
                {
                    b.Property<Guid>("SolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CodeRuntimeSubmitted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProblemId")
                        .HasColumnType("uuid");

                    b.Property<string>("SolutionUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("SolutionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProblemId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSolutions");
                });

            modelBuilder.Entity("AlgoDuck.Modules.UserModule.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AmountSolved")
                        .HasColumnType("integer")
                        .HasColumnName("amount_solved");

                    b.Property<Guid?>("CohortId")
                        .HasColumnType("uuid")
                        .HasColumnName("cohort_id");

                    b.Property<int>("Coins")
                        .HasColumnType("integer")
                        .HasColumnName("coins");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CohortId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserRoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AlgoDuck.Modules.UserModule.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_role_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("UserRoleId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlgoDuck.Modules.AuthModule.Models.Session", b =>
                {
                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlgoDuck.Modules.CohortModule.Models.Message", b =>
                {
                    b.HasOne("AlgoDuck.Modules.CohortModule.Models.Cohort", "Cohort")
                        .WithMany("Messages")
                        .HasForeignKey("CohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cohort");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlgoDuck.Modules.CohortModule.Models.Notification", b =>
                {
                    b.HasOne("AlgoDuck.Modules.CohortModule.Models.Cohort", "Cohort")
                        .WithMany("Notifications")
                        .HasForeignKey("CohortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cohort");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ContestModule.Models.Contest", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ItemModule.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ContestModule.Models.ContestProblem", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ContestModule.Models.Contest", "Contest")
                        .WithMany("ContestProblems")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Problem", "Problem")
                        .WithMany("ContestProblems")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("AlgoDuck.Modules.DuelModule.Models.Duel", b =>
                {
                    b.HasOne("AlgoDuck.Modules.CohortModule.Models.Cohort", "Cohort1")
                        .WithMany()
                        .HasForeignKey("Cohort1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.CohortModule.Models.Cohort", "Cohort2")
                        .WithMany()
                        .HasForeignKey("Cohort2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cohort1");

                    b.Navigation("Cohort2");
                });

            modelBuilder.Entity("AlgoDuck.Modules.DuelModule.Models.DuelParticipant", b =>
                {
                    b.HasOne("AlgoDuck.Modules.DuelModule.Models.Duel", "Duel")
                        .WithMany("DuelParticipants")
                        .HasForeignKey("DuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", "User")
                        .WithMany("DuelParticipants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Duel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ItemModule.Models.Item", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ItemModule.Models.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ItemModule.Models.Purchase", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ItemModule.Models.Item", "Item")
                        .WithMany("Purchases")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.HasTag", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Problem", "Problem")
                        .WithMany("HasTags")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Tag", "Tag")
                        .WithMany("HasTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.PersonalizedProblem", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Problem", "Problem")
                        .WithMany("PersonalizedProblems")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", "User")
                        .WithMany("PersonalizedProblems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Problem", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.DuelModule.Models.Duel", "Duel")
                        .WithMany()
                        .HasForeignKey("DuelId");

                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.ProblemType", "ProblemType")
                        .WithMany()
                        .HasForeignKey("ProblemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");

                    b.Navigation("Duel");

                    b.Navigation("ProblemType");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.ProblemTemplate", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Problem", "Problem")
                        .WithMany("ProblemTemplates")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.UserSolution", b =>
                {
                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Language", "Language")
                        .WithMany("UserSolutions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Problem", "Problem")
                        .WithMany("UserSolutions")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.ProblemModule.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoDuck.Modules.UserModule.Models.ApplicationUser", "User")
                        .WithMany("UserSolutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Problem");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AlgoDuck.Modules.UserModule.Models.ApplicationUser", b =>
                {
                    b.HasOne("AlgoDuck.Modules.CohortModule.Models.Cohort", "Cohort")
                        .WithMany("Users")
                        .HasForeignKey("CohortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AlgoDuck.Modules.UserModule.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("fk_user_user_role");

                    b.Navigation("Cohort");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("AlgoDuck.Modules.CohortModule.Models.Cohort", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ContestModule.Models.Contest", b =>
                {
                    b.Navigation("ContestProblems");
                });

            modelBuilder.Entity("AlgoDuck.Modules.DuelModule.Models.Duel", b =>
                {
                    b.Navigation("DuelParticipants");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ItemModule.Models.Item", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Language", b =>
                {
                    b.Navigation("UserSolutions");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Problem", b =>
                {
                    b.Navigation("ContestProblems");

                    b.Navigation("HasTags");

                    b.Navigation("PersonalizedProblems");

                    b.Navigation("ProblemTemplates");

                    b.Navigation("UserSolutions");
                });

            modelBuilder.Entity("AlgoDuck.Modules.ProblemModule.Models.Tag", b =>
                {
                    b.Navigation("HasTags");
                });

            modelBuilder.Entity("AlgoDuck.Modules.UserModule.Models.ApplicationUser", b =>
                {
                    b.Navigation("DuelParticipants");

                    b.Navigation("PersonalizedProblems");

                    b.Navigation("Purchases");

                    b.Navigation("Sessions");

                    b.Navigation("UserSolutions");
                });
#pragma warning restore 612, 618
        }
    }
}
