networks:
  app_network:
    driver: bridge

services:      
  warden:
    build:
      context: .
      dockerfile: SystemWarden/Dockerfile
    ports:
      - "${WARDEN_PORT:-7139}:7139"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - /tmp/app/data:/app/data:shared
    privileged: true
    pid: host
    networks:
      - app_network
    
  executor:
    build:
      context: .
      dockerfile: ExecutorService/Dockerfile
    ports:
      - "${EXECUTOR_PORT:-1337}:1337"
    extra_hosts:
      - "postgres-host:host-gateway"
      - "host.docker.internal:host-gateway"
    volumes:
      - /tmp/app/data:/app/data:slave
    devices:
      - /dev/kvm:/dev/kvm
    env_file:
      - .env
    networks:
      - app_network
    depends_on:
      - warden
    group_add:
      - ${KVM_GID}
    
  webapplication1:
    image: webapplication1
    build:
      context: .
      dockerfile: WebApplication1/Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
    ports:
      - "${WEB_PORT:-8080}:8080"
      - "${WEB_PORT2:-8081}:8081"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_KEY: ${JWT_KEY}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      JWT_EXP_MINUTES: ${JWT_EXP_MINUTES}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    networks:
      - app_network 
    depends_on:
      - executor

volumes:
  warden-staging:
    driver: local
  